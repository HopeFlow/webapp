// This file is auto-generated by scripts/gen_route_helpers.ts
import { redirect } from "next/navigation";

const toStringParam = (v: unknown) =>
  encodeURIComponent(typeof v === "string" ? v : JSON.stringify(v));
const toPathParams = <T extends { [key: string]: unknown }>(
  props: T,
  parts: Array<
    { part: keyof T & string; isParam: true } | { part: string; isParam: false }
  >,
) => {
  return Array.from(parts).flatMap(({ part, isParam }): string[] => {
    if (!isParam) return [part];
    const v = props[part as keyof T];
    if (v === undefined) return ["undefined"];
    if (Array.isArray(v)) return v.map(toStringParam);
    return [toStringParam(v)];
  });
};
const toSearchParams = <T extends { [key: string]: unknown }>(
  props: T,
  keys: Array<keyof T & string>,
) => {
  const result = Array.from(keys).flatMap((key): Array<string> => {
    const value = props[key];
    if (value === undefined) return [];
    if (Array.isArray(value))
      return value.map((e) => `${key}=${toStringParam(e)}`);
    return [`${key}=${toStringParam(value)}`];
  });
  if (result.length === 0) return "";
  return `?${result.join("&")}`;
};

// Corresponding to src/app/(root)/page.tsx
export const redirectToIndex = (): never => redirect("/");

// Corresponding to src/app/login/page.tsx
export const redirectToLogin = (props: { url?: string | undefined; }): never =>
  redirect(
    [
      "",
      ...toPathParams(props, [{ "part": "login", "isParam": false }]),
    ].join("/") + toSearchParams(props, ["url"]),
  );

export interface RedirectTo {
  (routeName: "Index"): never;
  (routeName: "Login", props: { url?: string | undefined; }): never;
}

export const redirectTo: RedirectTo = (routeName: "Index" | "Login", props?: any): never => {
  switch (routeName) {
    case "Index": return redirectToIndex();
    case "Login": return redirectToLogin(props);
  }
};
