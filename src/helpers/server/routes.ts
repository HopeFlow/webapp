/* eslint-disable @typescript-eslint/no-explicit-any */
// This file is auto-generated by scripts/gen_route_helpers.ts
import { parseFromRequestRecord } from "@/helpers/server/zod_helpers";
import { redirect } from "next/navigation";
import { z } from "zod";

const toStringParam = (v: unknown) =>
  encodeURIComponent(typeof v === "string" ? v : JSON.stringify(v));
const toPathParams = <T extends { [key: string]: unknown }>(
  props: T,
  parts: Array<
    { part: keyof T & string; isParam: true } | { part: string; isParam: false }
  >,
) => {
  return Array.from(parts).flatMap(({ part, isParam }): string[] => {
    if (!isParam) return [part];
    const v = props[part as keyof T];
    if (v === undefined) return ["undefined"];
    if (Array.isArray(v)) return v.map(toStringParam);
    return [toStringParam(v)];
  });
};
const toSearchParams = <T extends { [key: string]: unknown }>(
  props: T,
  keys: Array<keyof T & string>,
) => {
  const result = Array.from(keys).flatMap((key): Array<string> => {
    const value = props[key];
    if (value === undefined) return [];
    if (Array.isArray(value))
      return value.filter((e) => !!e).map((e) => `${key}=${toStringParam(e)}`);
    return value ? [`${key}=${toStringParam(value)}`] : [];
  });
  if (result.length === 0) return "";
  return `?${result.join("&")}`;
};

// Corresponding to src/app/sample/page.tsx
export const redirectToSample = (): never => redirect("/sample");

// Corresponding to src/app/(dock)/home/page.tsx
export const redirectToHome = (): never => redirect("/home");

// Corresponding to src/app/(dock)/notifications/page.tsx
export const redirectToNotifications = (): never => redirect("/notifications");

// Corresponding to src/app/(dock)/profile/page.tsx
export const redirectToProfile = (): never => redirect("/profile");

// Corresponding to src/app/(dock)/trophies/page.tsx
export const redirectToTrophies = (): never => redirect("/trophies");

// Corresponding to src/app/(nodock)/(root)/page.tsx
export const redirectToIndex = (): never => redirect("/");

// Corresponding to src/app/(nodock)/create_account/page.tsx
export const redirectToCreateAccount = (props: { url?: string | undefined }): never =>
  redirect(
    [
      "",
      ...toPathParams(props, [{ "part": "create_account", "isParam": false }]),
    ].join("/") + toSearchParams(props, ["url"]),
  );

// Corresponding to src/app/(nodock)/login/page.tsx
export const redirectToLogin = (props: { url?: string | undefined }): never =>
  redirect(
    [
      "",
      ...toPathParams(props, [{ "part": "login", "isParam": false }]),
    ].join("/") + toSearchParams(props, ["url"]),
  );

// Corresponding to src/app/(dock)/quest/[questId]/page.tsx
export const redirectToQuest = (props: { questId: string }): never =>
  redirect(
    [
      "",
      ...toPathParams(props, [{ "part": "quest", "isParam": false }, { "part": "questId", "isParam": true }]),
    ].join("/"),
  );

// Corresponding to src/app/(dock)/quest/create/page.tsx
export const redirectToQuestCreate = (): never => redirect("/quest/create");

// Corresponding to src/app/(nodock)/link/[linkCode]/page.tsx
export const redirectToLink = (props: { linkCode: string }): never =>
  redirect(
    [
      "",
      ...toPathParams(props, [{ "part": "link", "isParam": false }, { "part": "linkCode", "isParam": true }]),
    ].join("/"),
  );

// Corresponding to src/app/(dock)/chat/[questId]/[nodeId]/page.tsx
export const redirectToChat = (props: { questId: string, nodeId: string }): never =>
  redirect(
    [
      "",
      ...toPathParams(props, [{ "part": "chat", "isParam": false }, { "part": "questId", "isParam": true }, { "part": "nodeId", "isParam": true }]),
    ].join("/"),
  );

const routeSpecs: Map<
  "Sample" | "Home" | "Notifications" | "Profile" | "Trophies" | "Index" | "CreateAccount" | "Login" | "Quest" | "QuestCreate" | "Link" | "Chat",
  {
    pathRegExp: RegExp;
    paramsTypeDef?: z.AnyZodObject;
    searchParamsTypeDef?: z.AnyZodObject;
    isPublic: boolean;
  }
> = new Map([
  ["Sample", { pathRegExp: /^\/sample$/, paramsTypeDef: undefined, searchParamsTypeDef: undefined, isPublic: false }],
  ["Home", { pathRegExp: /^\/home$/, paramsTypeDef: undefined, searchParamsTypeDef: undefined, isPublic: false }],
  ["Notifications", { pathRegExp: /^\/notifications$/, paramsTypeDef: undefined, searchParamsTypeDef: undefined, isPublic: false }],
  ["Profile", { pathRegExp: /^\/profile$/, paramsTypeDef: undefined, searchParamsTypeDef: undefined, isPublic: false }],
  ["Trophies", { pathRegExp: /^\/trophies$/, paramsTypeDef: undefined, searchParamsTypeDef: undefined, isPublic: false }],
  ["Index", { pathRegExp: /^\/$/, paramsTypeDef: undefined, searchParamsTypeDef: undefined, isPublic: true }],
  ["CreateAccount", {
    pathRegExp: /^\/create_account$/, paramsTypeDef: undefined, searchParamsTypeDef: z.object({
      url: z.string().optional(),
    }), isPublic: true
  }],
  ["Login", { pathRegExp: /^\/login$/, paramsTypeDef: undefined, searchParamsTypeDef: z.object({ url: z.string().optional() }), isPublic: true }],
  ["Quest", { pathRegExp: /^\/quest\/(?<questId>[^/]+)$/, paramsTypeDef: z.object({ questId: z.string() }), searchParamsTypeDef: undefined, isPublic: false }],
  ["QuestCreate", { pathRegExp: /^\/quest\/create$/, paramsTypeDef: undefined, searchParamsTypeDef: undefined, isPublic: false }],
  ["Link", { pathRegExp: /^\/link\/(?<linkCode>[^/]+)$/, paramsTypeDef: z.object({ linkCode: z.string() }), searchParamsTypeDef: undefined, isPublic: false }],
  ["Chat", {
    pathRegExp: /^\/chat\/(?<questId>[^/]+)\/(?<nodeId>[^/]+)$/, paramsTypeDef: z.object({
      questId: z.string(),
      nodeId: z.string(),
    }), searchParamsTypeDef: undefined, isPublic: false
  }],
]);

const parseRouteFromUrl = (urlString: string) => {
  const url = new URL(urlString, "http://localhost");
  for (const [routeName, spec] of routeSpecs) {
    const match = url.pathname.match(spec.pathRegExp);
    if (!match) continue;
    if (spec.paramsTypeDef && !match.groups) continue;
    const params =
      spec.paramsTypeDef &&
      parseFromRequestRecord(match.groups!, spec.paramsTypeDef);
    const getValue = (v: string[]) => (v.length === 1 ? v[0] : v);
    const rawSearchParams = Object.fromEntries(
      Array.from(url.searchParams.keys()).map((k) => [
        k,
        getValue(url.searchParams.getAll(k)),
      ]),
    );
    const searchParams =
      spec.searchParamsTypeDef &&
      parseFromRequestRecord(rawSearchParams, spec.searchParamsTypeDef);
    return { routeName, spec, params, searchParams };
  }
};

export const isValidUrl = (urlString: string): boolean => {
  const routeNameAndSpecs = parseRouteFromUrl(urlString);
  return !!routeNameAndSpecs;
};

export const isPublicUrl = (urlString: string): boolean => {
  const routeNameAndSpecs = parseRouteFromUrl(urlString);
  if (!routeNameAndSpecs) return false;
  return routeNameAndSpecs.spec.isPublic;
};

export const redirectTo = (urlString: string): never => {
  const routeNameAndSpecs = parseRouteFromUrl(urlString);
  if (!routeNameAndSpecs) throw new Error(`Invalid redirect url: ${urlString}`);
  const { routeName, params, searchParams } = routeNameAndSpecs;
  const props = { ...params, ...searchParams };
  switch (routeName) {
    case "Sample": return redirectToSample();
    case "Home": return redirectToHome();
    case "Notifications": return redirectToNotifications();
    case "Profile": return redirectToProfile();
    case "Trophies": return redirectToTrophies();
    case "Index": return redirectToIndex();
    case "CreateAccount": return redirectToCreateAccount(props as any);
    case "Login": return redirectToLogin(props as any);
    case "Quest": return redirectToQuest(props as any);
    case "QuestCreate": return redirectToQuestCreate();
    case "Link": return redirectToLink(props as any);
    case "Chat": return redirectToChat(props as any);
  }
};
