/* eslint-disable @typescript-eslint/no-explicit-any */
// This file is auto-generated by scripts/gen_route_helpers.ts
import { useRouter } from "next/navigation";
import { useCallback } from "react";

const toStringParam = (v: unknown) =>
  encodeURIComponent(typeof v === "string" ? v : JSON.stringify(v));
const toPathParams = <T extends { [key: string]: unknown }>(
  props: T,
  parts: Array<
    { part: keyof T & string; isParam: true } | { part: string; isParam: false }
  >,
) => {
  return Array.from(parts).flatMap(({ part, isParam }): string[] => {
    if (!isParam) return [part];
    const v = props[part as keyof T];
    if (v === undefined) return ["undefined"];
    if (Array.isArray(v)) return v.map(toStringParam);
    return [toStringParam(v)];
  });
};
const toSearchParams = <T extends { [key: string]: unknown }>(
  props: T,
  keys: Array<keyof T & string>,
) => {
  const result = Array.from(keys).flatMap((key): Array<string> => {
    const value = props[key];
    if (value === undefined) return [];
    if (Array.isArray(value))
      return value.filter((e) => !!e).map((e) => `${key}=${toStringParam(e)}`);
    return value ? [`${key}=${toStringParam(value)}`] : [];
  });
  if (result.length === 0) return "";
  return `?${result.join("&")}`;
};

// Corresponding to src/app/sample/page.tsx
export const useGotoSample = () => {
  const router = useRouter();
  return useCallback(() => router.push("/sample"), [router]);
};

// Corresponding to src/app/(dock)/home/page.tsx
export const useGotoHome = () => {
  const router = useRouter();
  return useCallback(() => router.push("/home"), [router]);
};

// Corresponding to src/app/(dock)/notifications/page.tsx
export const useGotoNotifications = () => {
  const router = useRouter();
  return useCallback(() => router.push("/notifications"), [router]);
};

// Corresponding to src/app/(dock)/profile/page.tsx
export const useGotoProfile = () => {
  const router = useRouter();
  return useCallback(() => router.push("/profile"), [router]);
};

// Corresponding to src/app/(dock)/trophies/page.tsx
export const useGotoTrophies = () => {
  const router = useRouter();
  return useCallback(() => router.push("/trophies"), [router]);
};

// Corresponding to src/app/(nodock)/(root)/page.tsx
export const useGotoIndex = () => {
  const router = useRouter();
  return useCallback(() => router.push("/"), [router]);
};

// Corresponding to src/app/(nodock)/create_account/page.tsx
export const useGotoCreateAccount = () => {
  const router = useRouter();
  return useCallback(
    (props: { url?: string | undefined }) =>
      router.push(
        [
          "",
          ...toPathParams(props, [{ "part": "create_account", "isParam": false }]),
        ].join("/") + toSearchParams(props, ["url"]),
      ),
    [router],
  );
};

// Corresponding to src/app/(nodock)/login/page.tsx
export const useGotoLogin = () => {
  const router = useRouter();
  return useCallback(
    (props: { url?: string | undefined }) =>
      router.push(
        [
          "",
          ...toPathParams(props, [{ "part": "login", "isParam": false }]),
        ].join("/") + toSearchParams(props, ["url"]),
      ),
    [router],
  );
};

// Corresponding to src/app/(dock)/quest/[questId]/page.tsx
export const useGotoQuest = () => {
  const router = useRouter();
  return useCallback(
    (props: { questId: string }) =>
      router.push(
        [
          "",
          ...toPathParams(props, [{ "part": "quest", "isParam": false }, { "part": "questId", "isParam": true }]),
        ].join("/"),
      ),
    [router],
  );
};

// Corresponding to src/app/(dock)/quest/create/page.tsx
export const useGotoQuestCreate = () => {
  const router = useRouter();
  return useCallback(() => router.push("/quest/create"), [router]);
};

// Corresponding to src/app/(nodock)/link/[linkCode]/page.tsx
export const useGotoLink = () => {
  const router = useRouter();
  return useCallback(
    (props: { linkCode: string }) =>
      router.push(
        [
          "",
          ...toPathParams(props, [{ "part": "link", "isParam": false }, { "part": "linkCode", "isParam": true }]),
        ].join("/"),
      ),
    [router],
  );
};

// Corresponding to src/app/(dock)/chat/[questId]/[nodeId]/page.tsx
export const useGotoChat = () => {
  const router = useRouter();
  return useCallback(
    (props: { questId: string, nodeId: string }) =>
      router.push(
        [
          "",
          ...toPathParams(props, [{ "part": "chat", "isParam": false }, { "part": "questId", "isParam": true }, { "part": "nodeId", "isParam": true }]),
        ].join("/"),
      ),
    [router],
  );
};

export const useGoto = (): any => {
  const router = useRouter();
  return useCallback((urlString: string) => router.push(urlString), [router]);
};
