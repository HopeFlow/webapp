/* eslint-disable @typescript-eslint/no-explicit-any */
// This file is auto-generated by scripts/gen_server_action_hooks.ts
import { getQuests } from "../../quest_actions";
import { getQuestDetails } from "../../quest_actions";
import { useMutation, useQuery, useQueryClient, type UseQueryResult, type UseMutationResult } from "@tanstack/react-query";

export interface UseGetQuests {
  (variantName: "getQuestDetails", ...args: [string]): UseQueryResult<{ id: string; title: string; description: string; details: string; }>;
  (variantName: null, ...args: []): UseQueryResult<{ id: string; title: string; description: string; }[]> & {
    create: UseMutationResult<boolean, Error, { title: string; description: string; }>
  };
}

export const useGetQuests: UseGetQuests = (variantName: "getQuestDetails" | null, ...args: unknown[]): any => {
  const queryKey = [variantName ? ({ "getQuestDetails": "getQuests.getQuestDetails" })[variantName] : "getQuests", ...args];
  const dependantQueryKeys = [["getQuests"], ["getQuests.getQuestDetails"]];
  const queryClient = useQueryClient();
  const query = useQuery(
    {
      queryKey,
      queryFn: async () => await (
        variantName === "getQuestDetails" ? getQuestDetails(
          ...args as [string]
        ) :
          getQuests("read")
      ),
    },
    queryClient,
  );
  const create = useMutation(
    {
      mutationFn: async (data: { title: string; description: string; }) => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.cancelQueries({ queryKey }),
        );
        return await getQuests("create", data);
      },
      // --- optimistic (codegen may inject logic here) ---
      onMutate: async () => {
        // __OPTIMISTIC_START__
        // The generator will replace this block when an optimistic config is present.
        // It must return an object that can be read by onError for rollback.
        return { snapshots: [] as Array<{ key: unknown[]; prev: unknown }> };
        // __OPTIMISTIC_END__
      },
      onError: (_err, _vars, ctx) => {
        // __ROLLBACK_START__
        // The generator will keep this rollback logic; it works with the snapshots returned by onMutate.
        if (ctx?.snapshots) {
          for (const { key, prev } of ctx.snapshots) {
            queryClient.setQueryData(key, prev);
          }
        }
        // __ROLLBACK_END__
      },
      onSettled: () => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.invalidateQueries({ queryKey }),
        );
      },
    },
    queryClient,
  );
  if (!variantName) {
    return { ...query, create }
  }
  return query
};
