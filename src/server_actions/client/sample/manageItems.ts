/* eslint-disable @typescript-eslint/no-explicit-any */
// This file is auto-generated by scripts/gen_server_action_hooks.ts
import { manageItems, Item } from "../../definitions/sample/sample_actions";
import { getItemById } from "../../definitions/sample/sample_actions";
import {
  useMutation,
  useQuery,
  useQueryClient,
  type UseQueryResult,
  type UseMutationResult,
  type QueryClient,
} from "@tanstack/react-query";

export interface UseManageItems {
  (
    variantName: "getItemById",
    ...args: [number]
  ): UseQueryResult<undefined | Item>;
  (
    variantName: null,
    ...args: []
  ): UseQueryResult<Item[]> & {
    create: UseMutationResult<boolean, Error, Omit<Item, "id">>;
    update: UseMutationResult<boolean, Error, Item>;
    remove: UseMutationResult<boolean, Error, { id: number }>;
  };
}

export const useManageItems: UseManageItems = (
  variantName: "getItemById" | null,
  ...args: unknown[]
): any => {
  const queryKey = [
    variantName
      ? { getItemById: "manageItems.getItemById" }[variantName]
      : "manageItems",
    ...args,
  ];
  const dependantQueryKeys = [["manageItems"], ["manageItems.getItemById"]];
  const queryClient = useQueryClient();
  const query = useQuery(
    {
      queryKey,
      queryFn: async () =>
        await (variantName === "getItemById"
          ? getItemById(...(args as [number]))
          : manageItems("read")),
    },
    queryClient,
  );
  const create = useMutation(
    {
      mutationFn: async (data: Omit<Item, "id">) => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.cancelQueries({ queryKey }),
        );
        return await manageItems("create", data);
      },

      onSettled: () => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.invalidateQueries({ queryKey }),
        );
      },
    },
    queryClient,
  );
  const update = useMutation(
    {
      mutationFn: async (data: Item) => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.cancelQueries({ queryKey }),
        );
        return await manageItems("update", data);
      },

      onSettled: () => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.invalidateQueries({ queryKey }),
        );
      },
    },
    queryClient,
  );
  const remove = useMutation(
    {
      mutationFn: async (data: { id: number }) => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.cancelQueries({ queryKey }),
        );
        return await manageItems("remove", data);
      },

      onSettled: () => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.invalidateQueries({ queryKey }),
        );
      },
    },
    queryClient,
  );
  if (!variantName) {
    return { ...query, create, update, remove };
  }
  return query;
};
export const getManageItemsQueryKey = (
  variantName: "getItemById" | null,
  ...args: any[]
) => {
  return [
    variantName
      ? { getItemById: "manageItems.getItemById" }[variantName]
      : "manageItems",
    ...args,
  ] as const;
};
export const getManageItemsQueryOptions = (
  variantName: "getItemById" | null,
  ...args: any[]
) => {
  return {
    queryKey: getManageItemsQueryKey(variantName, ...args),
    queryFn: async () => {
      return variantName === "getItemById"
        ? getItemById(...(args as [number]))
        : manageItems("read", ...(args as []));
    },
  } as const;
};
export const prefetchManageItems: PrefetchManageItems =
  (variantName: "getItemById" | null, ...args: unknown[]) =>
  (qc: QueryClient) =>
    qc.prefetchQuery(getManageItemsQueryOptions(variantName, ...args));

export interface PrefetchManageItems {
  (
    variantName: "getItemById",
    ...args: [number]
  ): (qc: QueryClient) => Promise<unknown>;
  (variantName: null, ...args: []): (qc: QueryClient) => Promise<unknown>;
}
