/* eslint-disable @typescript-eslint/no-explicit-any */
// This file is auto-generated by scripts/gen_server_action_hooks.ts
import { ensureOAuthProfileWithDefaults } from "../../definitions/login/index";
import { useMutation, useQuery, useQueryClient, type QueryClient } from "@tanstack/react-query";

export const useEnsureOAuthProfileWithDefaults = () => {
  const queryKey = ["ensureOAuthProfileWithDefaults"];
  const dependantQueryKeys = [["ensureOAuthProfileWithDefaults"]];
  const queryClient = useQueryClient();
  const query = useQuery(
    {
      queryKey,
      queryFn: async () => await ensureOAuthProfileWithDefaults("read"),
    },
    queryClient,
  );
  const update = useMutation(
    {
      mutationFn: async (data: { timezone: string; emailEnabled?: boolean; emailFrequency?: "immediate" | "daily" | "weekly"; }) => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.cancelQueries({ queryKey }),
        );
        return await ensureOAuthProfileWithDefaults("update", data);
      },
      // --- optimistic (codegen may inject logic here) ---
      onMutate: async () => {
        // __OPTIMISTIC_START__
        // The generator will replace this block when an optimistic config is present.
        // It must return an object that can be read by onError for rollback.
        return { snapshots: [] as Array<{ key: unknown[]; prev: unknown }> };
        // __OPTIMISTIC_END__
      },
      onError: (_err, _vars, ctx) => {
        // __ROLLBACK_START__
        // The generator will keep this rollback logic; it works with the snapshots returned by onMutate.
        if (ctx?.snapshots) {
          for (const { key, prev } of ctx.snapshots) {
            queryClient.setQueryData(key, prev);
          }
        }
        // __ROLLBACK_END__
      },
      onSettled: () => {
        dependantQueryKeys.forEach((queryKey) =>
          queryClient.invalidateQueries({ queryKey }),
        );
      },
    },
    queryClient,
  );
  return { ...query, update }
};
export const getEnsureOAuthProfileWithDefaultsQueryKey = () => {
  return ["ensureOAuthProfileWithDefaults"] as const;
};
export const getEnsureOAuthProfileWithDefaultsQueryOptions = () => {
  return {
    queryKey: getEnsureOAuthProfileWithDefaultsQueryKey(),
    queryFn: async () => ensureOAuthProfileWithDefaults("read"),
  } as const;
};
export const prefetchEnsureOAuthProfileWithDefaults = () =>
  (qc: QueryClient) =>
    qc.prefetchQuery(getEnsureOAuthProfileWithDefaultsQueryOptions());
